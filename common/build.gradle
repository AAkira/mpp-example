plugins {
    id 'kotlin-multiplatform'
    id 'kotlinx-serialization'
}

apply from: 'android.gradle'

kotlin {
    android()
    if (project.findProperty("device")?.toBoolean() ?: false) {
        iosArm64('ios') {
            binaries {
                framework()
            }
        }
    } else {
        iosX64('ios') {
            binaries {
                framework()
            }
        }
    }
    js() {
        browser()
    }
    jvm()

    sourceSets {
        commonMain {
            dependencies {
                implementation rootProject.ext.kotlinCommon
                implementation rootProject.ext.coroutineCommon
                implementation rootProject.ext.serializationCommon
                implementation rootProject.ext.ktorClient
                implementation rootProject.ext.ktorClientJson
            }
        }
        androidMain {
            dependencies {
            }
        }
        iosMain {
            dependencies {
                implementation rootProject.ext.coroutineNative
                implementation rootProject.ext.serializationNative
                implementation rootProject.ext.ktorClientIos
                implementation rootProject.ext.ktorClientJsonIos
            }
        }
        jsMain {
            dependencies {
                implementation rootProject.ext.kotlinJs
                implementation rootProject.ext.coroutineJs
                implementation rootProject.ext.serializationJs
                implementation rootProject.ext.ktorClientJs
                implementation rootProject.ext.ktorClientJsonJs
            }
        }
        jvmMain {
            dependencies {
                implementation rootProject.ext.kotlinJvm
                implementation rootProject.ext.coroutine
                implementation rootProject.ext.serialization
                implementation rootProject.ext.ktorClientJvm
                implementation rootProject.ext.ktorClientJsonJvm
            }
        }
    }
}

// ios task
task packForXcode {
    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
    def target = project.findProperty("kotlin.target") ?: "ios"
    def framework = kotlin.targets."$target".compilations.main.target.binaries.findFramework("", buildType)

    dependsOn framework.linkTask

    doLast {
        copy {
            from framework.outputFile.parent
            into framework.outputFile.parentFile
            include 'data.framework/**'
            include 'data.framework.dSYM'
        }
    }
}

tasks.build.dependsOn packForXcode
